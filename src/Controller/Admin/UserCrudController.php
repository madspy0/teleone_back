<?php

namespace App\Controller\Admin;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Security\Core\Role\RoleHierarchyInterface;

class UserCrudController extends AbstractCrudController
{

    private UserPasswordHasherInterface $userPasswordHasher;
    private RoleHierarchyInterface $roleHierarchy;

    public function __construct(UserPasswordHasherInterface $userPasswordHasher, RoleHierarchyInterface $roleHierarchy)
    {
        $this->userPasswordHasher = $userPasswordHasher;
        $this->roleHierarchy = $roleHierarchy;
    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if ($entityInstance->getPassword() !== null) {
            $entityInstance->setPassword(
                $this->userPasswordHasher->hashPassword(
                    $entityInstance,
                    $entityInstance->getPassword()
                )
            );
        }
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        /*   return [
               IdField::new('id'),
               TextField::new('title'),
               TextEditorField::new('description'),
         ];*/
        yield EmailField::new('email');
        yield BooleanField::new('isVerified');
        if (Crud::PAGE_NEW === $pageName) {
            // Password de la personne
            yield TextField::new('password', 'Mot de passe (cryptÃ© BDD, algo : bcrypt)')
                ->setFormType(PasswordType::class)
                ->setRequired($pageName === Crud::PAGE_NEW)
                ->onlyOnForms();
        }
        $roles = $this->roleHierarchy->getReachableRoleNames($this->getUser()->getRoles());
        // Roles dans symfony
        yield ChoiceField::new('roles')
            ->setChoices(array_combine($roles, $roles))
            ->allowMultipleChoices()
            ->renderExpanded()
            ->renderAsBadges()
        ;
    }
}
